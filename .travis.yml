language: python
python: 3.6
stages:
- name: deploy_test
  if: type = push AND (branch IN (travis_integration, production-test))
- test
- name: deploy_production
  if: type = push AND (branch IN (master, travis_integration))
jobs:
  include:
  - stage: test
    services: postgresql
    env:
    - DJANGO=1.11
    before_install:
    - export DJANGO_SETTINGS_MODULE=aic_site.settings.development
    - export PYTHONPATH=$HOME/builds/SharifAIChallenge/aic_site
    - export PIP_USE_MIRRORS=true
    install:
    - pip install -r requirements/production.txt
    - pip install django==$DJANGO --quiet
    - pip install psycopg2 --quiet
    before_script:
    - psql -c "CREATE DATABASE mydb;" -U postgres
    script:
    - python manage.py makemigrations
    - python manage.py migrate
    - python manage.py test
  - stage: deploy_production
    addons:
      apt:
        packages:
        - optipng
        - jpegoptim
        - rsync
      ssh_known_hosts: 81.31.168.207
    before_script:
    - openssl aes-256-cbc -K $encrypted_01b3ac75515c_key -iv $encrypted_01b3ac75515c_iv
      -in deploy_rsa.enc -out /tmp/deploy_rsa -d
    - eval "$(ssh-agent -s)"
    - chmod 600 /tmp/deploy_rsa
    - ssh-add /tmp/deploy_rsa
    script:
    - mkdir build
    - rsync -r --exclude='.*' --exclude='build' --exclude='deploy' ./ build
    - cd build/config/nginx/sites-available
    - cp aichallenge.sharif.edu ../sites-enabled
    - cd ../../../..
    - cd deploy
    - cp deploy.sh Dockerfile ../build
    - cp ./docker-compose.yml ../build/docker-compose.yml
    - cd ..
    - cd build
    - sed -i 's/os.environ.setdefault("DJANGO_SETTINGS_MODULE", "aic_site.settings.development")/os.environ.setdefault("DJANGO_SETTINGS_MODULE",
      "aic_site.settings.production")/g' manage.py
    - cd ..
    - cd build/apps/
    - find . -iname '*.png' -print0 | xargs -0 optipng -o7 -preserve
    - find . -iname '*.jpg' -print0 | xargs -0 jpegoptim --max=90 --strip-all --preserve
      --totals
    - cd ../..
    - tar -czf deploy_package.tgz build
    - rsync --progress -avzhe 'ssh -o StrictHostKeyChecking=no' deploy_package.tgz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH
    - rm -r build deploy_package.tgz
    - rsync --progress -avzhe 'ssh -o StrictHostKeyChecking=no' deploy/deploy.sh $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH
    - ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST chmod +x $DEPLOY_PATH/deploy.sh
    - ssh -t -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST sudo $DEPLOY_PATH/deploy.sh
  - stage: deploy_test
    addons:
      apt:
        packages:
        - optipng
        - jpegoptim
        - rsync
      ssh_known_hosts: 81.31.168.207
    before_scrpit:
    - openssl aes-256-cbc -K $encrypted_01b3ac75515c_key -iv $encrypted_01b3ac75515c_iv
      -in deploy_rsa.enc -out /tmp/deploy_rsa -d
    - eval "$(ssh-agent -s)"
    - chmod 600 /tmp/deploy_rsa
    - ssh-add /tmp/deploy_rsa
    script:
    - mkdir build_test
    - rsync -r --exclude='.*' --exclude='build_test' --exclude='deploy' ./ build_test
    - cd build_test/config/nginx/sites-available
    - cp aichallenge.sharif.edu.test ../sites-enabled
    - cd ../../../..
    - cd deploy
    - cp deploy_test.sh Dockerfile ../build_test
    - cp ./docker-compose_test.yml ../build_test/docker-compose.yml
    - cd ..
    - cd build_test
    - sed -i 's/os.environ.setdefault("DJANGO_SETTINGS_MODULE", "aic_site.settings.development")/os.environ.setdefault("DJANGO_SETTINGS_MODULE",
      "aic_site.settings.production_test")/g' manage.py
    - cd ..
    - cd build_test/apps/
    - find . -iname '*.png' -print0 | xargs -0 optipng -o7 -preserve
    - find . -iname '*.jpg' -print0 | xargs -0 jpegoptim --max=90 --strip-all --preserve
      --totals
    - cd ../..
    - tar -czf deploy_test_package.tgz build_test
    - rsync --progress -avzhe 'ssh -o StrictHostKeyChecking=no' deploy_test_package.tgz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH
    - rm -r build_test deploy_test_package.tgz
    - rsync --progress -avzhe 'ssh -o StrictHostKeyChecking=no' deploy/deploy_test.sh $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH
    - ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST chmod +x $DEPLOY_PATH/deploy_test.sh
    - ssh -t -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST sudo $DEPLOY_PATH/deploy_test.sh


